package blastConnetor;

import orFinderApp.ORF;
import orFinderApp.Result;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This class contains the methods to extract the data from the xml files, generated by the Blast instances and
 * saves these within the Result object.
 *
 * @author Lex Bosch
 * @version 1.0
 * 29-03-2019
 */
class saveBlastToResults {
    /**
     * Contains regex terms to extract data with.
     */
    private static final ArrayList<String> REGEX_LIST = new ArrayList<String>(
            Arrays.asList("Hit_accession", "Hit_def", "Hsp_bit-score", "Hsp_query-from", "Hsp_query-to",
                    "Hit_len", "Hsp_evalue", "Hsp_identity", "Hsp_hit-from", "Hsp_hit-to"));

    /**
     * Saves BLAST result in an ArrayList.
     */
    ArrayList<Result> saveBlastToResultsMethod(String xmlString, ORF OrfSave, int amResults) {
        ArrayList<Result> resultList;
        List<String> allMatches = new ArrayList<String>();
        Matcher m = Pattern.compile("<Hit>[\\s\\S]*?<\\/Hit>")
                .matcher(xmlString);

        while (m.find()) {
            allMatches.add(m.group());
        }

        resultList = new ArrayList<>();

        if(allMatches.size() < amResults){
            amResults = allMatches.size();
        }

        for (int countHit = 0; countHit < amResults; countHit++) {
            resultList.add(hitsToResults(allMatches.get(countHit), OrfSave));
        }

        return resultList;
    }

    /**
     * Saves BLAST hits as Result objects.
     */
    private Result hitsToResults(String Hit, ORF orfSave) {
        ArrayList<String> regexResults = new ArrayList<>();
        Result tempResult;

        for (String pattern : REGEX_LIST) {
            Pattern sinPat = Pattern.compile("<" + pattern + ">([\\s\\S]*?)<\\/" + pattern + ">");
            Matcher sinHit = sinPat.matcher(Hit);
            if (sinHit.find()) {
                regexResults.add(sinHit.group(1));
            }
        }

        tempResult = new Result();
        tempResult.setAccession(regexResults.get(0));
        tempResult.setDescription(regexResults.get(1));
        tempResult.setpValue(Float.parseFloat(regexResults.get(6)));
        tempResult.setIdentity(Math.round(Float.parseFloat(regexResults.get(7))));
        tempResult.setScore(Math.round(Float.parseFloat(regexResults.get(2))));
        tempResult.setQueryCover(((Integer.parseInt(regexResults.get(4)) - Integer.parseInt(regexResults.get(3))
                + 1) / Integer.parseInt(regexResults.get(5))) * 100);
        tempResult.setStartPosition(Integer.parseInt(regexResults.get(7)));
        tempResult.setStopPosition(Integer.parseInt(regexResults.get(8)));

        return tempResult;
    }
}
